#!/usr/bin/env node
var path = require("path");
var fs = require("fs");
var usage = function(exitNum) {
  console.log("yeomania [create|recreate] <import generator path> <export path>");
  console.log("yeomania create <import generator path> <export path>");
  console.log("yeomania recreate <import generator path> <export generator path>");
  process.exit(exitNum);
};

if (process.argv.length < 2) usage(1);


process.argv.forEach(function(arg) {
  if (arg === '-h' || arg === '--help') {
    usage(0);
  }
});

this.opts = function() {
  this.mode = process.argv[2];
  if (this.mode === "create") {
    this.importPath = process.argv[3] || usage(1);
    this.exportPath = process.argv[4] || usage(1);
  } else if (this.mode === "recreate") {
    this.importPath = process.argv[3] || usage(1);
    this.exportPath = process.argv[4] || usage(1);
  } else {
    usage(1);
  }
  return this;
};

var self = this;

var options = self.opts();
var create = function() {
  var importPath = path.resolve(options.importPath);
  var exportPath = path.resolve(options.exportPath);
  if (!fs.existsSync(exportPath)) {
    fs.mkdirSync(exportPath);
  }
  var node_modules = path.join(exportPath, "node_modules");
  if (!fs.existsSync(node_modules)) {
    fs.mkdirSync(node_modules);
  }
  console.log("create symbolic link: " + importPath);
  var generator_name = path.basename(importPath);
  generator_path = path.join(node_modules, generator_name);
  fs.symlinkSync(importPath, generator_path);
};

var root = "";
var deleteRecursive = function(dir) {
  root = root || dir;
  if( fs.existsSync(dir) ) {
    fs.readdirSync(dir).forEach(function(file){
      var curPath = path.join(dir, file);
      if (fs.lstatSync(curPath).isSymbolicLink()) {
        fs.unlinkSync(curPath);
      } else if (fs.statSync(curPath).isDirectory()) {
        deleteRecursive(curPath);
      } else {
        fs.unlinkSync(curPath);
      }
    });
    if (root !== dir) {
      fs.rmdirSync(dir);
    }
  }
};
if (options.mode === "create") {
  create();
} else if (options.mode === "recreate") {
  console.log("remove " + path.resolve(options.exportPath) + " OK? [y/n] ");
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  var answer = "";
  process.stdin.on('data', function(chunk) {
    answer += chunk;
    if (answer.match(/^y/i)) {
      deleteRecursive(path.resolve(options.exportPath));
      create();
      process.exit(0);
    } else {
      process.exit(1);
    }
  });
}
